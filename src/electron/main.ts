import { enforceMacOSAppLocation, is } from "electron-util";
import * as path from "path";
import { app, BrowserWindow, ipcMain, IpcMainInvokeEvent } from "electron";
import { Channel } from "@shared/types/Channel";
import { ExampleProject } from "@shared/types/ExampleProject";
import { Project } from "@shared/types/Project";
import { Logger } from "./logger";
// @ts-ignore - no types available
import squirrel = require("electron-squirrel-startup");
import fs = require("fs-extra");
import { launchLanguageServer } from "./server-launcher";

const log = new Logger("main");

const USER_DOCUMENTS_PATH = app.getPath("documents");
const RESOURCES_PATH = is.development
  ? path.join(__dirname, "..", "..", "resources")
  : process.resourcesPath;
const WORKSPACE_PATH = path.join(USER_DOCUMENTS_PATH, "mars-explorer");

let webSocketPort: number;

export const PATHS = {
  workspace: WORKSPACE_PATH,
  workspaceExamples: path.join(WORKSPACE_PATH, "examples"),
  resources: RESOURCES_PATH,
};

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (squirrel) {
  log.info("Quitting because of squirrel");
  // eslint-disable-line global-require
  app.quit();
}

function setupApp() {
  // FIXME: dont do on every startup
  log.info("Ensuring workspace dirs");
  fs.ensureDirSync(PATHS.workspaceExamples);
  log.info(`Copying Examples to ${PATHS.workspaceExamples}`);
  fs.copySync(path.join(PATHS.resources, "examples"), PATHS.workspaceExamples);
}

let mainWindow: BrowserWindow;

function createWindow() {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    width: 1300,
    height: 900,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      enableRemoteModule: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow
    .loadURL(MAIN_WINDOW_WEBPACK_ENTRY)
    .catch((e: Error) => log.error("main window could not be loaded: ", e));

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Einige APIs kÃ¶nnen nur nach dem Auftreten dieses Events genutzt werden.
app
  .whenReady()
  .then(() => {
    log.info("Configuration: ", PATHS);
    log.info("Enforcing Location");
    enforceMacOSAppLocation();
    log.info("Starting setup");
    setupApp();
    //log.info("Starting server");
    //webSocketPort = startServer();
    log.info("Creating window");
    createWindow();

    app.on("activate", function () {
      // On macOS it's common to re-create a window in the app when the
      // dock icon is clicked and there are no other windows open.
      if (BrowserWindow.getAllWindows().length === 0) createWindow();
    });
  })
  .catch((e: Error) => log.error("App could not be initialized: ", e));

app.on("before-quit", () => log.info("Quitting app"));

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", function () {
  if (process.platform !== "darwin") app.quit();
});

ipcMain.handle(Channel.GET_WORKSPACE_PATH, () => PATHS.workspace);

ipcMain.handle(Channel.GET_EXAMPLES_PATH, () => PATHS.workspaceExamples);

ipcMain.handle(
  Channel.GET_EXAMPLE_PROJECT,
  (ev: IpcMainInvokeEvent, project: ExampleProject): Project => {
    const root = path.join(PATHS.workspaceExamples, project);
    return {
      name: project,
      rootPath: root,
      entryFilePath: path.join(root, "Program.cs"),
    };
  }
);

ipcMain.handle(
  Channel.READ_FILE,
  (ev: IpcMainInvokeEvent, path: string): string => {
    return fs.readFileSync(path, "utf-8");
  }
);

ipcMain.handle(Channel.GET_WEBSOCKET_PORT, () => webSocketPort);
ipcMain.handle(Channel.START_LANGUAGE_SERVER, () =>
  launchLanguageServer(mainWindow)
);
